package ru.ifmo.ctddev.swapyourbook.mybatis.gen.dao;

import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;
import ru.ifmo.ctddev.swapyourbook.mybatis.gen.model.AuthToken;
import ru.ifmo.ctddev.swapyourbook.mybatis.gen.model.AuthTokenExample;

public interface AuthTokenMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auth_token
     *
     * @mbggenerated Wed Dec 31 00:38:26 MSK 2014
     */
    @SelectProvider(type=AuthTokenSqlProvider.class, method="countByExample")
    int countByExample(AuthTokenExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auth_token
     *
     * @mbggenerated Wed Dec 31 00:38:26 MSK 2014
     */
    @DeleteProvider(type=AuthTokenSqlProvider.class, method="deleteByExample")
    int deleteByExample(AuthTokenExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auth_token
     *
     * @mbggenerated Wed Dec 31 00:38:26 MSK 2014
     */
    @Delete({
        "delete from auth_token",
        "where tokenID = #{tokenid,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long tokenid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auth_token
     *
     * @mbggenerated Wed Dec 31 00:38:26 MSK 2014
     */
    @Insert({
        "insert into auth_token (tokenID, token, ",
        "username, password, ",
        "email, created_timestamp)",
        "values (#{tokenid,jdbcType=BIGINT}, #{token,jdbcType=VARCHAR}, ",
        "#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, ",
        "#{email,jdbcType=VARCHAR}, #{createdTimestamp,jdbcType=TIMESTAMP})"
    })
    int insert(AuthToken record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auth_token
     *
     * @mbggenerated Wed Dec 31 00:38:26 MSK 2014
     */
    @InsertProvider(type=AuthTokenSqlProvider.class, method="insertSelective")
    int insertSelective(AuthToken record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auth_token
     *
     * @mbggenerated Wed Dec 31 00:38:26 MSK 2014
     */
    @SelectProvider(type=AuthTokenSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="tokenID", property="tokenid", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="token", property="token", jdbcType=JdbcType.VARCHAR),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="created_timestamp", property="createdTimestamp", jdbcType=JdbcType.TIMESTAMP)
    })
    List<AuthToken> selectByExample(AuthTokenExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auth_token
     *
     * @mbggenerated Wed Dec 31 00:38:26 MSK 2014
     */
    @Select({
        "select",
        "tokenID, token, username, password, email, created_timestamp",
        "from auth_token",
        "where tokenID = #{tokenid,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="tokenID", property="tokenid", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="token", property="token", jdbcType=JdbcType.VARCHAR),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="created_timestamp", property="createdTimestamp", jdbcType=JdbcType.TIMESTAMP)
    })
    AuthToken selectByPrimaryKey(Long tokenid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auth_token
     *
     * @mbggenerated Wed Dec 31 00:38:26 MSK 2014
     */
    @UpdateProvider(type=AuthTokenSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") AuthToken record, @Param("example") AuthTokenExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auth_token
     *
     * @mbggenerated Wed Dec 31 00:38:26 MSK 2014
     */
    @UpdateProvider(type=AuthTokenSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") AuthToken record, @Param("example") AuthTokenExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auth_token
     *
     * @mbggenerated Wed Dec 31 00:38:26 MSK 2014
     */
    @UpdateProvider(type=AuthTokenSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(AuthToken record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table auth_token
     *
     * @mbggenerated Wed Dec 31 00:38:26 MSK 2014
     */
    @Update({
        "update auth_token",
        "set token = #{token,jdbcType=VARCHAR},",
          "username = #{username,jdbcType=VARCHAR},",
          "password = #{password,jdbcType=VARCHAR},",
          "email = #{email,jdbcType=VARCHAR},",
          "created_timestamp = #{createdTimestamp,jdbcType=TIMESTAMP}",
        "where tokenID = #{tokenid,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(AuthToken record);
}